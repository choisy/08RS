---
title: "08RS data"
number-sections: true
format:
  html:
    toc: true
    toc-depth: 4
editor: source
editor_options: 
  chunk_output_type: console
#bibliography: references.bib
#csl: the-american-naturalist.csl
---

```{r include = FALSE, eval = FALSE}
knitr::purl("data.qmd", "tmp.R", documentation = FALSE)
source("tmp.R")
file.remove("tmp.R")

add_nojekyll <- function() {
  file <- ".nojekyll"
  file.create(file)
  gert::git_add(file)
  gert::git_commit("Adding the .nojekyll file")
  gert::git_push()
}
```

```{r include = FALSE}
par2 <- function(...) par(..., mgp = c(1.5, .5, 0), bty = "n")

knitr::knit_hooks$set(
  margin1 = function(before, options, envir) {
    if (before) par2(plt = c(.105, .97, .15, .95)) else NULL
  })

eps <- .8
knitr::opts_chunk$set(margin1    = TRUE,
                      fig.retina = 2,
                      fig.align  = "center",
                      fig.height = eps * 5, # default is 5
                      fig.width  = eps * 7) # default is 7
```


## Global parameters

The path to the data folder on the local computer:

```{r}
root <- "~/Library/CloudStorage/OneDrive-OxfordUniversityClinicalResearchUnit/"
data_folder <- paste0(root, "GitHub/choisy/08RS/")
``` 


## Packages

Required packages:

```{r}
required <- c("readxl", "purrr", "dplyr", "magrittr", "tidyr")
```

Installing those that are not installed yet:

```{r}
to_install <- required[! required %in% installed.packages()[,"Package"]]
if (length(to_install)) install.packages(to_install)
```

Loading some packages for interactive use:

```{r message = FALSE}
library(dplyr)
library(purrr)
library(stringr)
library(tidyr)
```


## Functions

A tuning of the `readxl::read_excel()` function:

```{r}
read_excel2 <- function(file, ...) readxl::read_excel(paste0(data_folder, file), ...)
```

A function that reads all the tabs of an excel file in the data folder `data_folder`
defined above:

```{r}
read_excel_file <- function(file) {
  sheets_names <- readxl::excel_sheets(paste0(data_folder, file))
  sheets_names |>
    map(~ read_excel2(file, .x)) |> 
    setNames(sheets_names)
}
```

A function that remove some slots of a list, by names:

```{r}
remove_slots <- function(lst, slt) {
  lst[setdiff(names(lst), slt)]
}
```

A function that extracts some variables of some slots of a list `x` of data frames:

```{r}
get_vars <- function(sel, x) {
  x |> 
    magrittr::extract(names(sel)) |>
    map2(sel, ~ select(.x, !!!.y))
}
```

The variables in questions are defined in the named list `sel` of character vectors.
The names of this list should be among the names of `x` and the character vectors of
each slots should be among the names of the columns of the data frames in the
corresponding slots. A function that renames a column of a data frame:

```{r}
rename2 <- function(df, newname, oldname) {
  df_names <- names(df)
  df_names[which(df_names == oldname)] <- newname
  setNames(df, df_names)
}
```


## CRF data

Loading the data from CliRes:

```{r}
CRF <- read_excel_file("6-11-2024-CTU08RS_Data.xlsx")
```

The names of the data frames in CliRes and in Saras' code, with definitions:

```{r}
# CliRes        Saras           Definition
# ------------------------------------------------------------------
# ENROL         data_EN         enrollment
# HIST          data_HIST       history at enrollment
# CONHIST       CONHIST         contact history at enrollment
# EXAM          data_EX         symptoms and signs at enrollment
# LAB           data_LAB        lab results at admission
# NEU           data_NEU        neurological exam
# DAILY         data_Daily      daily review
# MED           data_MED        medications
# DEVSOCSED     data_DEV        development and socio-economic data
# DISC          data_DISC       discharge summary
# FUP           data_FUP        first follow-up day 7-10
# FUP_II        data_FUP6m      first follow-up month 6
# FUP_III       data_FUP18m     first follow-up month 18
# NEURO         data_NEURO      neurological assessment
# ABC           data_MABC       movement ABC-2
```

The CRF dictionary:

```{r}
CRF_dict <- list(
  devsocsed = list(MomEdu = c("Never been to school",
                              "Attended some primary school",
                              "Completed primary school (5th gr)",
                              "Completed lower secondary school (9th gr)",
                              "Completed higher secondary school (12th gr)",
                              "Completed university/college degree",
                              "Completed postgraduate degree"),
                   Toilet = c("Own flush toilet",
                              "Shared flush toilet",
                              "Traditional pit toilet",
                              "Ventilation improved pit toilet",
                              "No facility/bush/field",
                              "None of above"),
                   Water  = c("Private tap",
                              "Public standpipe",
                              "Bottled water",
                              "Well in own residence",
                              "Public well",
                              "Rain water",
                              "Spring",
                              "River/lake/pond", NA,
                              "None of the above")),
  disc = list(GradeHFMD   = c("grade 1",
                              "grade 2a",
                              "grade 2b(1)",
                              "grade 2b(2)",
                              "grade 3",
                              "grade 4",
                              "Not Applicable"),
              Outcome     = c("Full recovery without complication",
                              "Incomplete recovery",
                              "Transferred to another hospital",
                              "Taken home without approval",
                              "Death",
                              "Discharged to die")))
```

Selection of variables from the CRF:

```{r}
selection <- list(ENROL     = c("ParNo", "DateEnrol", "Gender", "DateBirth"),
                  HIST      = c("ParNo", "DateIllness", "DateAdmHTD", "DateAdmHTD",
                                "DateAdmHosp", "HFMDToday", "HFMDAdmitted"),
                  EXAM      = c("ParNo", "headCircumference", "height", "weigh"),
                  DEVSOCSED = c("ParNo", "MomEdu", "Toilet", "Refrigerator",
                                "AirConditioner", "Motorbike", "Water"),
                  DISC      = c("ParNo", "DateDisc", "GradeHFMD", "TreatSepsis",
                                "Outcome", "Seizure", "Hypertonicity", "LimbPara",
                                "CNP", "DiapWeak", "Trache", "Nasotube",
                                "BehaveChange"))
```


## PCR data

```{r message = FALSE}
PCR <- "03EI-08RS PCR-Seq result.xlsx" |>
  read_excel2("08RS") |> 
  select(ID, `OUCRU RESULT`) |> 
  mutate(across(ID, as.numeric)) |> 
  na.exclude()
```


## Children data

The case and control groups:

```{r}
groups <- c(rep("HFMD", 299), rep("control", 200),
            rep("HFMD", 200), rep("control", 299))
```

First recoding of variables:

```{r}
recoding1 <- function(x) {
  x |>
    mutate(across(Gender, ~ c("male", "female")[.x]),
           across(starts_with("Date"), as.Date),
           across(c("Refrigerator", "AirConditioner",
                    "Motorbike", "TreatSepsis"), ~ .x < 2))
}
```

Second recoding of variables:

```{r}
recoding2 <- function(x) {
  x |>
    mutate(across(HFMD, ~ CRF_dict$disc$GradeHFMD[.x]),
           across(MomEdu, ~ CRF_dict$devsocsed$MomEdu[.x]),
           across(Toilet, ~ CRF_dict$devsocsed$Toilet[.x]),
           across(Water, ~ CRF_dict$devsocsed$Water[.x]),
           across(Outcome, ~ CRF_dict$disc$Outcome[.x]))
}
```

Selecting, recoding the variables from the CRF, and assigning to case or control:

```{r}
children <- selection |> 
  remove_slots("ABC") |> 
  get_vars(CRF) |> 
  reduce(left_join, by = "ParNo") |> 
  rowwise() |> 
  mutate(HFMD = max(across(c(HFMDToday, HFMDAdmitted, GradeHFMD)))) |> #takes max grade
  ungroup() |> 
  recoding1() |> 
  recoding2() |>
  mutate(ID    = as.numeric(str_remove(ParNo, "^.*-")),
         group = groups[ID]) |> 
  left_join(PCR, "ID") |> 
  rename(PCR = `OUCRU RESULT`) |> 
  select(-HFMDToday, -HFMDAdmitted, -GradeHFMD, -ID) |> 
  select(ParNo, Gender, DateBirth, DateIllness, DateAdmHosp,
         DateAdmHTD, DateEnrol, DateDisc, everything()) |> 
  arrange(ParNo)
```

Note: the date of discharge is missing for many children:

```{r}
children |> 
  select(ParNo, DateEnrol, DateDisc) |> 
  filter(is.na(DateDisc))
```


## M-ABC data

```{r}
ABC <- CRF$ABC |> 
  select(ParNo, DateTested, ends_with("ISS")) |> 
  mutate(across(starts_with("Date"), as.Date)) |> 
  arrange(ParNo, DateTested)
```

Of note, here
* `MD` stands for manual dexterity,
* `AC` stands for aiming and catching and
* `BAL` stands for balance.

```{r}
ABC |> 
  na.exclude()
```


## Bayley data

Loading the data from CliRes:

```{r}
Bayley0 <- read_excel_file("12-9-2025-Bayley_v3_P1_Data.xlsx")
```

The tabs that we are interested in are the following:

* **CS:** cognitive scale
* **RC:** receptive communication (language scale)
* **EC:** expressive communication (language scale)
* **FM:** fine motor (motor scale)
* **GM:** gross motor (motor scale)

```{r}
Bayley_tabs <- c("CS", "RC", "EC", "FM", "GM")
```

Let's generate the data frame from these tabs:

```{r}
common_variables1 <- c("PARNO", "DATETESTED")
common_variables2 <- c(common_variables1, "SCALESCORE")

Bayley<- Bayley_tabs |> 
  map(~ c(common_variables2, .x)) |> 
  setNames(Bayley_tabs) |> 
  get_vars(Bayley0) |> 
  map2(paste0("SCALESCORE_", Bayley_tabs), rename2, "SCALESCORE") |> 
  reduce(left_join, by = c("PARNO", "DATETESTED")) |> 
  mutate(across(starts_with("DATE"), as.Date)) |> 
  rename(ParNo = PARNO) |> 
  mutate(across(ParNo, ~ stringr::str_remove(.x, "08RS_")))
```


## Saras' CSV file

```{r}
saras <- readr::read_csv(paste0(root, "GitHub/choisy/08RS/complete data including all withdrawals_updated26_3_21.csv"))
```

```{r}
select(saras, waste, visitM, ddifENB, ddifEN, FUP, FUP1)
```

```{r}
table(saras$waste)
```


## Time points

A function that generates the time points:

```{r}
make_time_points <- function(x) {
  children |> 
    select(ParNo, DateEnrol, DateDisc) |> 
    left_join(x, "ParNo") |> 
    mutate(time_diff = DateTested - DateEnrol,
           time1 = 0, time2 = 6, time3 = 18, # in months
           across(c(time1, time2, time3), ~ as.numeric(abs(time_diff - 30 * .x)))) |> 
    rowwise() |> 
    mutate(min_delay = min(across(c(time1, time2, time3)))) |> 
    ungroup() |> 
    mutate(time_point = ifelse(min_delay == time1,
                               "enrollment", ifelse(min_delay == time2,
                                                    "6 months", "18 months")))
}
```

A function that gets the IDs of children with duplicated assessments:

```{r}
get_IDs_with_duplicated <- function(x) {
  x |> 
    filter(! is.na(time_point)) |> 
    group_by(ParNo) |> 
    group_modify(~ .x |>
                   group_by(time_point) |>
                   tally()) |> 
    ungroup() |> 
    filter(n > 1) |> 
    pull(ParNo) |> 
    unique()
}
```

A function that uses the previous two to generate the data with duplicated assessments:

```{r}
show_duplicated_assessments <- function(x) {
  data_with_time_points <- make_time_points(x)
  IDs_with_duplicates <- get_IDs_with_duplicated(data_with_time_points)
  filter(data_with_time_points, ParNo %in% IDs_with_duplicates)
}
```


### M-ABC data

```{r}
ABC |>
  show_duplicated_assessments() |> 
  writexl::write_xlsx("M-ABC2.xlsx")
```


### Bayley data

```{r}
Bayley |>
  rename(DateTested = DATETESTED) |>
  show_duplicated_assessments() |> 
  writexl::write_xlsx("Bayley2.xlsx")
```



